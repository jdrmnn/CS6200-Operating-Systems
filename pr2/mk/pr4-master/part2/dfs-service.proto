syntax = "proto3";

package dfs_service;

service DFSService {

    // Add your service calls here

    // 1. REQUIRED (Parts 1 & 2): A method to store files on the server
    rpc storeFile (stream StoreFileRequest) returns (StoreFileReply) {}

    // 2. REQUIRED (Parts 1 & 2): A method to fetch files from the server 
    rpc fetchFile (FetchFileRequest) returns (stream FetchFileReply) {}

    // 3. REQUIRED (Parts 1 & 2): A method to delete files from the server
    rpc deleteFile (DeleteFileRequest) returns (DeleteFileReply) {}

    // 4. REQUIRED (Parts 1 & 2): A method to list all files on the server
    rpc listFiles (ListFilesRequest) returns (ListFilesReply) {}

    // 5. REQUIRED (Parts 1 & 2): A method to get the status of a file on the server
    rpc fileStat (FetchFileStat) returns (FileStatReply) {}
    
    // 6. REQUIRED (Part 2 only): A method to request a write lock from the server
    rpc acquireWriteLock (WriteLockRequest) returns (WriteLockReply) {}

    // 7. REQUIRED (Part 2 only): A method named CallbackList to handle asynchronous file listing requests
    //                            from a client. This method should return a listing of files along with their
    //                            attribute information. The expected attribute information should include name,
    //                            size, modified time, and creation time.

    rpc CallbackList (CallbackListRequest) returns (CallbackListReply) {}
    // 8. Any other methods you deem necessary to complete the tasks of this assignment

}

// Store
message StoreFileRequest {
  string filename = 1;
  int32 size = 2;
  bytes filedata = 3;
  string client_id = 4;
  uint32 crc = 5;
}

message StoreFileReply {}

// Fetch
message FetchFileRequest {
  string filename = 1;
}

message FetchFileReply {
  int32 size = 1;
  bytes filedata = 2;
}

// Delete
message DeleteFileRequest {
  string filename = 1;
  string client_id = 2;
}

message DeleteFileReply {}

// List
message ListFilesRequest {}

message ListFilesReply {
  map<string,int32> files = 1;
}

// Fetch
message FetchFileStat {
  string filename = 1;
}

message FileStatReply {
  uint64 size = 1;
  uint32 crc = 2;
  int32 mtime = 3;
}

// Write Lock
message WriteLockRequest {
  string client_id = 1;
  string filename = 2;
}

message WriteLockReply {}

// CallbackList
message CallbackListRequest {
  string name = 1;
}

message CallbackListReply {
  map<string,int32> fileTimeMap = 1;
  map<string,uint32> fileCrcMap = 2;
}
